name: Sync RBL to Cortex XDR

on:
  push:
    paths:
      - 'fqdnlist.txt'
      - 'iplist.txt'
      - 'hashlist.txt'
      - '.github/workflows/xdr-ioc-sync.yml'
  workflow_dispatch: {}

concurrency:
  group: xdr-ioc-sync
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # ---- Upload IOCs from repository files ----
      - name: Push IOCs to Cortex XDR
        env:
          XDR_BASE_URL: ${{ secrets.XDR_BASE_URL }}
          XDR_API_ID:   ${{ secrets.XDR_API_ID }}
          XDR_API_KEY:  ${{ secrets.XDR_API_KEY }}
          # Comma-separated list of files in the repo root:
          SOURCES: "fqdnlist.txt,iplist.txt,hashlist.txt"
          VENDOR: "ONO-RBL"
          SEVERITY: "high"
          BATCH_SIZE: "1000"
          COMMENT_TAG: "Imported from GitHub"
        run: |
          python xdr_ioc_upsert_from_sources.py

      # ---- Canary insert + tolerant verification (does NOT fail on 5xx/599 listing) ----
      - name: Insert canary IOC & try to verify
        id: canary
        env:
          XDR_BASE_URL: ${{ secrets.XDR_BASE_URL }}
          XDR_API_ID:   ${{ secrets.XDR_API_ID }}
          XDR_API_KEY:  ${{ secrets.XDR_API_KEY }}
          VENDOR:       "ONO-RBL"
          COMMENT_TAG:  "GitHub sync test"
        run: |
          python - <<'PY'
          import os, time, requests
          from datetime import datetime, timezone

          BASE   = os.environ["XDR_BASE_URL"].rstrip("/")
          AUTHID = os.environ["XDR_API_ID"]
          APIKEY = os.environ["XDR_API_KEY"]
          VENDOR = os.getenv("VENDOR","ONO-RBL")
          COMMENT= os.getenv("COMMENT_TAG","GitHub sync test")

          H = {
            "Authorization": APIKEY,
            "x-xdr-auth-id": AUTHID,
            "Content-Type": "application/json",
            "Accept": "application/json",
          }

          def post(uri, json_body, max_retries=6, timeout=120):
            backoff=2
            for attempt in range(1, max_retries+1):
              try:
                r = requests.post(uri, headers=H, json=json_body, timeout=timeout)
                if r.status_code in (429,500,502,503,504,599):
                  ra = r.headers.get("Retry-After")
                  sleep = int(ra) if ra and ra.isdigit() else backoff
                  print(f"[retry] HTTP {r.status_code} sleeping {sleep}s (attempt {attempt}/{max_retries})")
                  time.sleep(sleep)
                  backoff = min(int(backoff*2.2), 90)
                  continue
                r.raise_for_status()
                return r.json()
              except requests.RequestException as e:
                if attempt == max_retries:
                  raise
                print(f"[retry] {e}; backoff {backoff}s")
                time.sleep(backoff)
                backoff = min(int(backoff*2.2), 90)

          canary = f"ono-rbl-canary-{datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S')}.example"
          ins_uri = f"{BASE}/public_api/v1/indicators/insert_jsons"
          ins_body = {"request_data":{"indicators":[{
            "indicator":canary, "type":"DOMAIN_NAME",
            "severity":"MEDIUM", "reputation":"BAD",
            "comment":COMMENT, "vendor":{"name":VENDOR},
            "default_expiration_enabled": True
          }]}}
          print(f"[insert] {canary}")
          js = post(ins_uri, ins_body)
          if not js.get("reply", False):
            print("CANARY_STATUS=insert_failed")
            with open("canary.txt","w") as f: f.write(canary+"\ninsert_failed\n")
            raise SystemExit(0)

          # Try exact match polling (up to ~2 minutes)
          get_uri = f"{BASE}/public_api/v1/indicators/get"
          ok = False
          for i in range(12):
            try:
              q = {"request_data":{
                "search_from":0, "search_to":50,
                "filters":[{"field":"indicator","operator":"eq","value":canary}],
                "sort":{"field":"creation_time","keyword":"desc"}
              }}
              resp = post(get_uri, q, max_retries=3, timeout=90)
              items = (resp or {}).get("reply",{}).get("indicators",[]) or []
              if items:
                ok = True
                # optional: print the rule_id if present
                rid = items[0].get("rule_id")
                if rid is not None:
                  print(f"[visible] rule_id={rid}")
                break
            except Exception as e:
              print(f"[exact-match] {e}")
            time.sleep(10)

          status = "visible" if ok else "inconclusive"
          with open("canary.txt","w") as f:
            f.write(canary+"\n"+status+"\n")
          print(f"CANARY={canary}")
          print(f"CANARY_STATUS={status}")
          PY

      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xdr-rejects
          path: artifacts/rejects.json
          if-no-files-found: warn

      - name: Save canary
        uses: actions/upload-artifact@v4
        with:
          name: xdr-canary
          path: canary.txt
          if-no-files-found: warn

      - name: Summarize
        shell: bash
        run: |
          echo "### Canary result" >> $GITHUB_STEP_SUMMARY
          if [[ -f canary.txt ]]; then
            CANARY=$(sed -n '1p' canary.txt)
            STATUS=$(sed -n '2p' canary.txt)
            echo "- **Indicator**: \`$CANARY\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: \`$STATUS\`" >> $GITHUB_STEP_SUMMARY
            if [[ "$STATUS" != "visible" ]]; then
              echo "> Listing API was unavailable (5xx/599). Insert likely succeeded, but visibility couldn't be confirmed from GitHub." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- No canary file produced." >> $GITHUB_STEP_SUMMARY
          fi
