name: Sync RBL to Cortex XDR

on:
  push:
    paths:
      - 'fqdnlist.txt'
      - 'iplist.txt'
      - 'hashlist.txt'
      - '.github/workflows/xdr-ioc-sync.yml'
  workflow_dispatch: {}

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # --- Push IOCs ---
      - name: Push IOCs to Cortex XDR
        env:
          XDR_BASE_URL: ${{ secrets.XDR_BASE_URL }}
          XDR_API_ID:   ${{ secrets.XDR_API_ID }}
          XDR_API_KEY:  ${{ secrets.XDR_API_KEY }}
          SOURCES: "fqdnlist.txt,iplist.txt,hashlist.txt"
          VENDOR: ONO-RBL
          SEVERITY: HIGH
          BATCH_SIZE: '1000'
          COMMENT_TAG: "Imported from GitHub"
          FAIL_ON_ERROR: '0'
        run: |
          python xdr_ioc_upsert_from_sources.py || true

      - name: Upload rejects (if any)
        uses: actions/upload-artifact@v4
        with:
          name: xdr-rejects
          path: artifacts/rejects.json           # <-- correct path
          if-no-files-found: warn

      # --- Canary insert + tolerant verify (doesn't fail the job) ---
      - name: Insert canary & try to verify
        id: canary
        env:
          XDR_BASE_URL: ${{ secrets.XDR_BASE_URL }}
          XDR_API_ID:   ${{ secrets.XDR_API_ID }}
          XDR_API_KEY:  ${{ secrets.XDR_API_KEY }}
          VENDOR:       ONO-RBL
          COMMENT_TAG:  "GitHub sync test"
        run: |
          python - <<'PY'
          import os, sys, time, json, requests
          from datetime import datetime, timezone

          BASE   = os.environ["XDR_BASE_URL"].rstrip("/")
          API_ID = os.environ["XDR_API_ID"]
          APIKEY = os.environ["XDR_API_KEY"]
          VENDOR = os.getenv("VENDOR","ONO-RBL")
          COMMENT= os.getenv("COMMENT_TAG","GitHub sync test")

          H = {
            "Authorization": APIKEY,
            "x-xdr-auth-id": API_ID,
            "Content-Type": "application/json",
            "Accept": "application/json"
          }

          def post(uri, payload, tries=6, timeout=120):
            back=2
            for i in range(1, tries+1):
              try:
                r = requests.post(uri, headers=H, json=payload, timeout=timeout)
                if r.status_code in (429,500,502,503,504,599):
                  ra = r.headers.get("Retry-After")
                  sleep = int(ra) if ra and ra.isdigit() else back
                  print(f"[retry] HTTP {r.status_code} sleeping {sleep}s (attempt {i}/{tries})")
                  time.sleep(sleep); back = min(int(back*2.2), 90)
                  continue
                r.raise_for_status()
                return r
              except requests.RequestException as e:
                if i==tries: raise
                print(f"[retry] {e}; backoff {back}s"); time.sleep(back); back=min(int(back*2.2),90)

          # 1) Insert canary
          canary = f"ono-rbl-canary-{datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S')}.example"
          ins_uri = f"{BASE}/public_api/v1/indicators/insert_jsons"
          ins_body = {"request_data":{"indicators":[{
            "indicator":canary, "type":"DOMAIN_NAME",
            "severity":"MEDIUM", "reputation":"BAD",
            "comment":COMMENT, "vendor":{"name":VENDOR}
          }]}}

          open("canary.log","w").write(f"Base={BASE}\nAuthId={API_ID}\nCanary={canary}\n")
          print(f"[insert] {canary}")
          try:
            r = post(ins_uri, ins_body)
            open("canary.log","a").write(f"InsertStatus={r.status_code}\nInsertResp={r.text}\n")
            js = r.json()
            if not js.get("reply", False):
              open("canary.txt","w").write(canary+"\ninsert_failed\n")
              sys.exit(0)
          except Exception as e:
            open("canary.log","a").write(f"InsertError={e}\n")
            open("canary.txt","w").write(canary+"\ninsert_failed\n")
            sys.exit(0)

          # 2) Exact-match polling (best-effort; may 5xx/599)
          get_uri = f"{BASE}/public_api/v1/indicators/get"
          ok = False
          for i in range(12):  # ~2 minutes
            print(f"[poll {i+1}/12] exact-match search for '{canary}'")
            q = {"request_data":{
              "search_from":0, "search_to":50,
              "filters":[{"field":"indicator","operator":"eq","value":canary}]
            }}
            try:
              r = post(get_uri, q, tries=3, timeout=90)
              open("canary.log","a").write(f"Poll{i+1}={r.status_code} {r.text[:400]}\n")
              items = (r.json() or {}).get("reply",{}).get("indicators",[]) or []
              if any(it.get("indicator")==canary for it in items):
                ok=True
                break
            except Exception as e:
              open("canary.log","a").write(f"PollErr{i+1}={e}\n")
            time.sleep(10)

          # 3) Fallback paging of newest
          if not ok:
            print("Exact match not visible yet; paging newest endpointsâ€¦")
            endpoints = [
              f"{BASE}/public_api/v1/indicators/get",
              f"{BASE}/public_api/v1/indicators/get_indicators/"
            ]
            for ep in endpoints:
              sf = 0
              for _ in range(5):
                body = {"request_data":{
                  "search_from":sf, "search_to":sf+100,
                  "sort":{"field":"creation_time","keyword":"desc"}
                }}
                try:
                  r = post(ep, body, tries=3, timeout=90)
                  open("canary.log","a").write(f"List {ep} sf={sf} -> {r.status_code}\n")
                  items = (r.json() or {}).get("reply",{}).get("indicators",[]) or []
                  if not items: break
                  if any(it.get("indicator")==canary for it in items):
                    ok=True
                    break
                  sf += 100
                except Exception as e:
                  open("canary.log","a").write(f"ListErr {ep} sf={sf}: {e}\n"); break
              if ok: break

          status = "visible" if ok else "inconclusive"
          print(f"CANARY={canary}\nCANARY_STATUS={status}")
          open("canary.txt","w").write(canary+"\n"+status+"\n")
          PY

      - name: Upload canary logs
        uses: actions/upload-artifact@v4
        with:
          name: xdr-canary
          path: |
            canary.txt
            canary.log
          if-no-files-found: warn

      - name: Summarize
        shell: bash
        run: |
          echo "### Canary result" >> $GITHUB_STEP_SUMMARY
          if [[ -f canary.txt ]]; then
            CANARY=$(sed -n '1p' canary.txt)
            STATUS=$(sed -n '2p' canary.txt)
            echo "- **Indicator**: \`$CANARY\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: \`$STATUS\`" >> $GITHUB_STEP_SUMMARY
            if [[ "$STATUS" != "visible" ]]; then
              echo "> Listing API returned 5xx/599 from the runner. Inserts still returned \`reply: true\`; verify locally or via Audit logs." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- No canary file produced." >> $GITHUB_STEP_SUMMARY
          fi
