name: Sync RBL to Cortex XDR

on:
  push:
    paths:
      - 'fqdnlist.txt'
      - 'iplist.txt'
      - 'hashlist.txt'
      - '.github/workflows/xdr-ioc-sync.yml'
  workflow_dispatch: {}

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # ---------- BULK UPLOAD ----------
      - name: Push IOCs to Cortex XDR
        env:
          XDR_BASE_URL: ${{ secrets.XDR_BASE_URL }}
          XDR_API_ID:   ${{ secrets.XDR_API_ID }}
          XDR_API_KEY:  ${{ secrets.XDR_API_KEY }}
          SOURCES: "fqdnlist.txt,iplist.txt,hashlist.txt"
          VENDOR: ONO-RBL
          SEVERITY: high
          BATCH_SIZE: '1000'
          COMMENT_TAG: Imported from GitHub
        run: |
          python xdr_ioc_upsert_from_sources.py || true
        # ^ don't fail the job if upload step exits non-zero; we still do canary + summary

      - name: Upload rejects (if any)
        uses: actions/upload-artifact@v4
        with:
          name: xdr-rejects
          path: rejects.json
          if-no-files-found: warn

      # ---------- CANARY INSERT + VERIFY ----------
      - name: Insert canary IOC & verify (tolerant)
        id: canary
        env:
          XDR_BASE_URL: ${{ secrets.XDR_BASE_URL }}
          XDR_API_ID:   ${{ secrets.XDR_API_ID }}
          XDR_API_KEY:  ${{ secrets.XDR_API_KEY }}
          VENDOR:       ONO-RBL
          COMMENT_TAG:  "GitHub sync test"
        run: |
          python - <<'PY'
          import os, sys, time, json, requests
          from datetime import datetime, timezone

          BASE   = os.environ["XDR_BASE_URL"].rstrip("/")
          API_ID = os.environ["XDR_API_ID"]
          APIKEY = os.environ["XDR_API_KEY"]
          VENDOR = os.getenv("VENDOR","ONO-RBL")
          COMMENT= os.getenv("COMMENT_TAG","GitHub sync test")

          H = {
            "Authorization": APIKEY,
            "x-xdr-auth-id": API_ID,
            "Content-Type": "application/json",
            "Accept": "application/json"
          }

          S = requests.Session()
          S.headers.update(H)

          def post(uri, payload, max_retries=6, timeout=90):
            backoff=2
            for attempt in range(1, max_retries+1):
              try:
                r = S.post(uri, json=payload, timeout=timeout)
                if r.status_code in (429,500,502,503,504,599):
                  ra = r.headers.get("Retry-After")
                  sleep = int(ra) if ra and ra.isdigit() else backoff
                  print(f"[retry] HTTP {r.status_code} sleeping {sleep}s (attempt {attempt}/{max_retries})")
                  time.sleep(sleep); backoff = min(int(backoff*2.2), 90); continue
                r.raise_for_status()
                return r.json()
              except requests.RequestException as e:
                if attempt == max_retries:
                  raise
                print(f"[retry] {e} (attempt {attempt}/{max_retries}); backoff {backoff}s")
                time.sleep(backoff); backoff = min(int(backoff*2.2), 90)

          canary = f"ono-rbl-canary-{datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S')}.example"
          print(f"[insert] {canary}")

          # 1) Try rich endpoint first
          body_jsons = {"request_data":{"indicators":[{
            "indicator":canary, "type":"DOMAIN_NAME",
            "severity":"MEDIUM", "reputation":"BAD",
            "comment":COMMENT, "vendor":{"name":VENDOR},
          }]}}
          try:
            js = post(f"{BASE}/public_api/v1/indicators/insert_jsons", body_jsons, max_retries=3)
            ok_insert = bool(js.get("reply", False))
          except Exception as e:
            print(f"[insert_jsons] failed: {e}")
            ok_insert = False

          # 2) Fallback: simple endpoint (array under request_data)
          if not ok_insert:
            body_simple = {"request_data":[{
              "indicator":canary, "type":"DOMAIN_NAME",
              "severity":"MEDIUM", "reputation":"BAD",
              "comment":COMMENT
            }]}
            try:
              js2 = post(f"{BASE}/public_api/v1/indicators/insert_simple_indicators/", body_simple, max_retries=3)
              ok_insert = bool(js2.get("reply", False))
            except Exception as e:
              print(f"[insert_simple_indicators] failed: {e}")
              ok_insert = False

          status = "insert_failed"
          visible = False

          if ok_insert:
            # Try exact match a few times (console may lag)
            get_uri = f"{BASE}/public_api/v1/indicators/get"
            for i in range(12):  # ~2 minutes
              print(f"[poll {i+1}/12] exact-match search for '{canary}'")
              try:
                q = {"request_data":{
                  "search_from":0, "search_to":50,
                  "filters":[{"field":"indicator","operator":"eq","value":canary}]
                }}
                resp = post(get_uri, q, max_retries=3)
                items = (resp or {}).get("reply",{}).get("indicators",[]) or []
                if items:
                  print("[visible] exact match found")
                  visible = True
                  break
              except Exception as e:
                print(f"[exact-match] {e}")
              time.sleep(10)

            # If not visible yet, page newest across two endpoints
            if not visible:
              print("Exact match not visible yet; paging newest endpoints…")
              endpoints = [
                f"{BASE}/public_api/v1/indicators/get",              # v1
                f"{BASE}/public_api/v1/indicators/get_indicators/"   # legacy path w/trailing slash
              ]
              for ep in endpoints:
                search_from = 0
                for _ in range(5):
                  try:
                    body = {"request_data":{
                      "search_from":search_from, "search_to":search_from+100,
                      "sort":{"field":"creation_time","keyword":"desc"}
                    }}
                    js2 = post(ep, body, max_retries=3)
                    items = (js2 or {}).get("reply",{}).get("indicators",[]) or []
                    if not items: break
                    if any(it.get("indicator")==canary for it in items):
                      print("[visible] found in paged newest list")
                      visible = True
                      break
                    search_from += 100
                  except Exception as e:
                    print(f"[list] {ep} error: {e}")
                    break
                if visible: break

            status = "visible" if visible else "inconclusive"

          # record for artifact + summary
          with open("canary.txt","w") as f:
            f.write(canary+"\n"+status+"\n")
          print(f"CANARY={canary}\nCANARY_STATUS={status}")
          PY

      - name: Save canary details (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: xdr-canary
          path: canary.txt
          if-no-files-found: warn

      - name: Summarize
        shell: bash
        run: |
          echo "### Canary result" >> $GITHUB_STEP_SUMMARY
          if [[ -f canary.txt ]]; then
            CANARY=$(sed -n '1p' canary.txt)
            STATUS=$(sed -n '2p' canary.txt)
            echo "- **Indicator**: \`$CANARY\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: \`$STATUS\`" >> $GITHUB_STEP_SUMMARY
            if [[ "$STATUS" != "visible" ]]; then
              echo "> Insert succeeded or likely succeeded, but listing APIs returned 5xx/599 from the GitHub runner. Verify locally (PowerShell) or check **Settings → Audit Management Logs** for 'Indicator added'." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- No canary file produced." >> $GITHUB_STEP_SUMMARY
          fi
